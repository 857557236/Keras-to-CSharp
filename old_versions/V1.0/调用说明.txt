一、基础说明
1，将5个类库文件放到程序根目录。
2，引入Neuralnet.dll。
3，引用命名空间:
            using Wineforever.Neuralnet;
4，创建神经网络系统:
            var sys = new Wineforever.Neuralnet.System("sys");//参数说明:[name]系统名,可任意指定,无影响
[input]系统输入,类型为System或List<double>,若为缺省则可通过System.Input()函数设置.
5，创建网络层:
            sys.Create(784, "", "normal");//输入层
//参数说明:[neuron_num]当前层神经元个数
//[name]网络层名称,可任意指定,无影响
//[activation]激励器
//[optimizer]优化器
            sys.Create(256, "", "relu");//隐含层
            sys.Create(256, "", "relu");
            sys.Create(10, "", "softmax");//输出层
6，设置数据:
            sys.Input(train_x);
7，训练:
            sys.Train(train_y, epoch);//参数说明:[target]训练目标
//[epoch]迭代次数
//[loss]损失函数
8，输出:
            var res = sys.GetOutput();
9,保存神经元数据:
            Wineforever.Neuralnet.client.Save();

二、内置函数
1，激励器(Activation):relu, normal(线性函数), sigmoid, leaky relu, softmax(仅输出层)
2，优化器(Optimizer):GD, BGD, SGD, Momentum, AdaGrad, RMSProp, Adam
3，损失函数(Loss Function):MBE, MAE, MSE, SVM, crossentropy

三、其他
1，创建带有Dropout的网络层:
            Wineforever.Neuralnet.client.dropout_rate = 0.2;  //设置Dropout概率
            sys.Create(256, "", "sigmoid", "SGD,dropout");
2，连接两个网络系统:
            decoded.Input(encoded);
3，添加网络层:
            Layer encoded_input_layer = new Layer(Input.Count, Input,"encoded_input_layer","normal");
            Layer encoded_hidden_layer = new Layer(10 encoded_input_layer, "encoded_hidden_layer", "sigmoid");
            Layer encoded_output_layer = new Layer(3, encoded_hidden_layer, "encoded_output_layer", "normal");
            encoded.Add(encoded_input_layer);
            encoded.Add(encoded_hidden_layer);
            encoded.Add(encoded_output_layer);
//同理,删除网络层:encoded.Remove(layer)
4，获取中间层输入:
            var layer_res = layer.GetOutput();
5，神经元:
            var Neuron = layer.Neuron[0];
            Neuron.Connect(neuron);//令某个神经元与指定神经元连接
            Neuron.Disconnect(neuron);//断开连接
            Neuron.Save();//保存权重
            Neuron.SetWeight(value);//设置权重
6，设置学习率
            Wineforever.Neuralnet.client.learning_rate = 1e-2;